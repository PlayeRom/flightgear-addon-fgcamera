<?xml version="1.0"?>

<PropertyList>
	<name>RND-curves</name>
	<layout>vbox</layout>
	<x>-20</x>
	<y>-50</y>

	<nasal>
		<open><![CDATA[
			var self = cmdarg();
			var listeners = [];
			append(listeners, setlistener( "/sim/fgcamera/current-camera/camera-index", func { getCameraIndex() } ) );
			append(listeners, setlistener( "/sim/fgcamera/state/wow", func { getMode() }, 0, 0 ) );

			var mode = 0;
			var current_index = 0;
			var engine_number = getprop("/sim/fgcamera/dialogs/power-plant-vibration/engine-number");
			var node = "rotor";
			if (mode == "engine")
				node = "engine[" ~ engine_number ~ "]";

			var is_numeric = func(v) typeof(v) == "scalar";

			#==================================================
			#
			#==================================================
			var marker = {
				new: func (x, y, w, i, chart, curve, data_x, data_y, graph_width, graph_height, h_res, v_res) {
					var m = { parents : [ marker ] };
					m._x = x;
					m._y = y;
					m._id = i;
					m.data_x = data_x;
					m.data_y = data_y;
					m._curve = curve;
					m.graph_width = graph_width;
					m.graph_height = graph_height;
					m.h_res = h_res;
					m.v_res = v_res;

					m.marker = chart.createChild("group");

					m._path = m.marker.createChild("path", "marker" ~ i)
						.moveTo(-w/2, -w/2 * 0)
						.arcSmallCWTo(w/2, w/2, 0, w/2, 0)
						.arcSmallCWTo(w/2, w/2, 0, -w/2, 0)
#						.lineTo(w/2, -w/2)
#						.lineTo(w/2, w/2)
#						.lineTo(-w/2, w/2)
						.close()
						.setColor(0,0.8,0)
						.setColorFill(0.25,0.24,0.22)
						.setStrokeLineWidth(2)
					;

					m._path.addEventListener( "drag", func(e) m._move(e) );

					m.marker.setTranslation(x, y);
					m._update_curve();

					return m;
				},
			#--------------------------------------------------
				_move: func (e) {
					var x = me._x + e.deltaX;
					var y = me._y + e.deltaY;

					if ( x < 0 ) x = 0;
					if ( x > me.graph_width ) x = me.graph_width;
					if ( me._id == 0) x = 0;

					if ( y > me.graph_height ) y = me.graph_height;
					if ( y < 0 ) y = 0;

					me.marker.setTranslation(me._x = x, me._y = y);
					me._update_curve();

					#me.data_x[me._id].setValue(x * me.h_res);
					#me.data_y[me._id].setValue((me.graph_height - y) * me.v_res);
					var N = props.getNode("/sim/fgcamera/current-camera/effects").getChild("RND", mode, 1).getNode("curves", 1);
					N.getChild(me.data_x, me._id, 1).setValue(x * me.h_res);
					N.getChild(me.data_y, me._id, 1).setValue((me.graph_height - y) * me.v_res);
					N = props.getNode("/sim/fgcamera", 1).getChild("camera", current_index, 1).getNode("effects", 1).getChild("RND", mode, 1).getNode("curves", 1);
					N.getChild(me.data_x, me._id, 1).setValue(x * me.h_res);
					N.getChild(me.data_y, me._id, 1).setValue((me.graph_height - y) * me.v_res);
				},
			#--------------------------------------------------
				refresh: func (graph_width, graph_height, h_res, v_res) {
					me.graph_width = graph_width;
					me.graph_height = graph_height;
					me.h_res = h_res;
					me.v_res = v_res;
				},

				_update_curve: func {
					var x = 2 * me._id;
					var y = x + 1;
					me._curve.setDouble("coord[" ~ x ~ "]", me._x);
					me._curve.setDouble("coord[" ~ y ~ "]", me._y);
				},

				_line_color: func(r, g, b) me._path.setColor(r, g, b),

				_fill_color: func(r, g, b) me._path.setColorFill(r, g, b),

				getTranslation: func return me.marker.getTranslation(),

				setTranslation: func (x, y) {
					me.marker.setTranslation(me._x = x, me._y = y);
					me._update_curve();
				},
			};

			var Chart = {
				new: func (x_values, y_values, myCanvas) {

					#if ( size(x_values) != size(y_values) )
					#	return;

					var m = { parents : [ Chart ] };

					m._chartTitle = "Title";
					m._xTitle = "X axis";
					m._yTitle = "Y axis";


					m.max_x        = 3500;
					m.max_y        = 20;
					m.h_grid       = 500;
					m.v_grid       = 2;
					m.h_spacing    = 100;      # pixel
					m.v_spacing    = 50;       # pixel

					m.h_res        = m.h_grid / m.h_spacing;
					m.v_res        = m.v_grid / m.v_spacing;
					m.graph_width  = m.max_x / m.h_res;
					m.graph_height = m.max_y / m.v_res;


					m.margins = {"top": 30, "bottom": 45, "left": 50, "right": 30};

					m.view_x = myCanvas.get("view");
					m.view_y = myCanvas.get("view[1]");

					m.canvas = myCanvas;


					m.x_values = x_values;
					m.y_values = y_values;
					var N = props.getNode("/sim/fgcamera/current-camera/effects").getChild("RND", mode, 1).getNode("curves", 1);
					m._x_vector = N.getChildren(m.x_values);
					m._y_vector = N.getChildren(m.y_values);

					foreach (var a; ["_chart", "_axes_bg", "_xAxis", "_yAxis", "_graph_window_top"])
						m[a] = myCanvas.createGroup();

					m._markers = [];
					m._curve = m._chart.createChild("path", "curve")
						.moveTo(0,0)
						.setColor(1,0,0)
						.setStrokeLineWidth(3)
					;
					m._grid = m._chart.createChild("path", "grid").setColor(1,1,1).setStrokeDashArray([2,4]);

					m._grid.addEventListener("drag", func (e) { #revise
							var t = m._chart.getTranslation();

							t[0] += e.deltaX;
							t[1] += e.deltaY;

							if ( t[0] > (var l = m.margins.left + m.h_spacing / 2) )
								t[0] = l;

							if ( t[0] < (l = -m.margins.right - m.graph_width + m.view_x - m.h_spacing / 2) )
								t[0] = l;

							if ( t[1] < (l = -m.graph_height + m.view_y - m.margins.bottom - m.v_spacing / 2) )
								t[1] = l;

							if ( t[1] > (l = m.margins.top + m.v_spacing / 2) )
								t[1] = l;

							m._chart.setTranslation(t[0], t[1]);
							m._xAxis.setTranslation(t[0], m._xAxis.getTranslation()[1]);
							m._yAxis.setTranslation(m._yAxis.getTranslation()[0], t[1]);
						} );

					for (var i = 1; i <= 9; i += 1) m._curve.lineTo(0,0);

					m._draw_chart();

					for (var i = 0; i <= 9; i += 1) {
						var x = m._x_vector[i].getValue() / m.h_res;
						var y = ( m.max_y - m._y_vector[i].getValue() ) / m.v_res;
						append( m._markers, marker.new(x, y, 10, i, m._chart, m._curve, x_values, y_values, m.graph_width, m.graph_height, m.h_res, m.v_res) );
					}
					m.reset();
					return m;
				},


				reset: func {
					me._chart.setTranslation(me.margins.left, me.view_y - me.graph_height - me.margins.bottom);
					me._xAxis.setTranslation(me.margins.left, me.view_y - me.margins.bottom);
					me._yAxis.setTranslation(me.margins.left, me.view_y - me.graph_height - me.margins.bottom);
				},


				refresh: func {
					me.h_res        = me.h_grid / me.h_spacing;
					me.v_res        = me.v_grid / me.v_spacing;
					me.graph_width  = me.max_x / me.h_res;
					me.graph_height = me.max_y / me.v_res;

					foreach (var a; me._markers)
						a.refresh(me.graph_width, me.graph_height, me.h_res, me.v_res);
				},

				update: func () {
					var x = nil;
					var y = nil;


					var N = props.getNode("/sim/fgcamera/current-camera/effects").getChild("RND", mode, 1).getNode("curves", 1);
					me._x_vector = N.getChildren(me.x_values);
					me._y_vector = N.getChildren(me.y_values);
					for (var i = 0; i <= 9; i += 1) {
						x = me._x_vector[i].getValue() / me.h_res;
						y = ( me.max_y - me._y_vector[i].getValue() ) / me.v_res;

						me._markers[i].setTranslation(x, y);
					}
				},

				hSpacing: func (spacing = nil) {
					if ( spacing == nil )
						return me.h_spacing;
					me.h_spacing = spacing;
					me._draw_chart();
					me.update();
					me
				},

				hStep: func (step = nil) {
					if ( step == nil )
						return me.h_grid;
					me.h_grid = step;
					me._draw_chart();
					me.update();
					me
				},

				hLength: func (l = nil) {
					if ( l == nil )
						return me.max_x;
					me.max_x = l;
					me._draw_chart();
					me.update();
					me
				},

				vSpacing: func (spacing = nil) {
					if ( spacing == nil )
						return me.v_spacing;
					me.v_spacing = spacing;
					me._draw_chart();
					me.update();
					me
				},

				vStep: func (step = nil) {
					if ( step == nil )
						return me.v_grid;
					me.v_grid = step;
					me._draw_chart();
					me.update();
					me
				},

				vLength: func (l = nil) {
					if ( l == nil )
						return me.max_y;
					me.max_y = l;
					me._draw_chart();
					me.update();
					me
				},

				chartTitle: func (title = nil) {
					if (title == nil)
						return me._chart_title.get("text");
					me._chart_title.set("text", me._chartTitle = title);
					me;
				},

				xTitle: func (title = nil) {
					if (title == nil)
						return me._x_title.get("text");
					me._x_title.set("text",  me._xTitle = title);
					me;
				},

				yTitle: func (title = nil) {
					if (title == nil)
						return me._y_title.get("text");
					me._y_title.set("text",  me._yTitle = title);
					me;
				},

				graphLineColor: func(r,g,b) {
					me._curve.setColor(r,g,b);
					me;
				},

				markerLineColor: func(r,g,b) {
					foreach(var a; me._markers)
						a._line_color(r,g,b);
					me;
				},

				markerFillColor: func(r,g,b) {
					foreach(var a; me._markers)
						a._fill_color(r,g,b);
					me;
				},

				plotAreaColor: func(r, g, b, t = 1) {
					me.canvas.setColorBackground(r, g, b, t);
					me;
				},

				chartAreaColor: func(r, g, b) {
					foreach(var a; [me._area_top, me._area_right, me._area_bottom, me._area_x, me._area_y])
						a.setColorFill(r,g,b);
					me;
				},

				_draw_chart: func {
					me.refresh(); #revise!
					me._draw_grid();
					me._xAxis.removeAllChildren();
					me._yAxis.removeAllChildren();
					me._axes_bg.removeAllChildren();
					me._draw_x_axis();
					me._draw_y_axis();
					me._draw_window();
					me._draw_titles();
					me.reset();
				},

				_draw_titles: func {
					me._chart_title = me._draw_text (
						me._graph_window_top,
						(me.view_x - me.margins.left - me.margins.right) / 2 + me.margins.left,
						me.margins.top / 2,
						me._chartTitle
					);
					me._x_title = me._draw_text (
						me._graph_window_top,
						(me.view_x - me.margins.left - me.margins.right) / 2 + me.margins.left,
						me.view_y - 15 / 2,
						me._xTitle
					);
					me._y_title = me._draw_text (
						me._graph_window_top,
						15,
						(me.view_y - me.margins.top - me.margins.bottom) / 2 + me.margins.top,
						me._yTitle,
						"center-center",
						-90 * D2R
					);
				},

				_draw_text: func (group, x, y, txt, alignment = "center-center", rotation = 0) {
					group.createChild("text")
						.setText(txt)
						.setTranslation(x, y)
						.setAlignment(alignment)
						.setFontSize(15)
						.setFont("LiberationFonts/LiberationSans-Regular.ttf")
						.setColor(1,1,1)
						.setRotation(rotation)
					;
				},

				_draw_x_axis: func {
					me._area_x = me._axes_bg.createChild("path", "bg")
						.setStrokeLineWidth(0)
						.rect(0, me.view_y, me.view_x, -me.margins.bottom)
						.setColor(0,0,0)
						.setColorFill(0,0,0)
					;
					me._line_x = me._axes_bg.createChild("path", "axis")
						.setStrokeLineWidth(2)
						.moveTo(me.margins.left, me.view_y - me.margins.bottom)
						.horizTo(me.view_x -me.margins.right)
						.setColor(1,1,1)
						#.reset()
					;
					for (var i = 0; i <= me.graph_width; i += me.h_spacing)
						me._draw_text(me._xAxis, i, 15, i * me.h_res);
				},

				_draw_y_axis: func {
					me._area_y = me._axes_bg.createChild("path", "bg")
						.setStrokeLineWidth(0)
						.rect(0, 0, me.margins.left, me.view_y)
						.setColor(0,0,0)
						.setColorFill(0,0,0)
					;
					me._axes_bg.createChild("path", "axis")
						.setStrokeLineWidth(2)
						.moveTo(me.margins.left, me.margins.top)
						.vertTo(me.view_y - me.margins.bottom)
						.setColor(1,1,1)
					;
					for (var i = 0; i <= me.graph_height; i += me.v_spacing)
						me._draw_text(me._yAxis, -15, me.graph_height - i, i * me.v_res);
				},

				_draw_window: func {
					#foreach (var group; [me._area_top, me._area_right, me._area_bottom, me._graph_window_top])
						me._graph_window_top.removeAllChildren();

					me._area_top = me._graph_window_top.createChild("path")
						.setStrokeLineWidth(0)
						.rect(0, 0, me.view_x, me.margins.top)
						.setColor(0,0,0)
						.setColorFill(0,0,0)
					;
					me._area_right = me._graph_window_top.createChild("path")
						.setStrokeLineWidth(0)
						.rect(me.view_x, 0, -me.margins.right, me.view_y)
						.setColor(0,0,0)
						.setColorFill(0,0,0)
					;
					me._area_bottom = me._graph_window_top.createChild("path")
						.setStrokeLineWidth(0)
						.rect(0, me.view_y, me.margins.left, -me.margins.bottom)
						.setColor(0,0,0)
						.setColorFill(0,0,0)
					;
					me._graph_window_top.createChild("path")
						.setStrokeLineWidth(1)
						.moveTo(me.margins.left, me.margins.top)
						.horizTo(me.view_x -me.margins.right)
						.setColor(1,1,1)
						.setStrokeDashArray([2,4])
					;
					me._graph_window_top.createChild("path")
						.setStrokeLineWidth(1)
						.moveTo(me.view_x - me.margins.right, me.margins.top)
						.vertTo(me.view_y - me.margins.bottom)
						.setColor(1,1,1)
						.setStrokeDashArray([2,4])
					;
				},

				_draw_grid: func {
					me._grid.reset();

					for (var i = 0; i <= me.graph_width; i += me.h_spacing)
						me._grid.moveTo(i, -me.v_spacing).lineTo(i, me.graph_height + me.v_spacing);

					for (var i = 0; i <= me.graph_height; i += me.v_spacing)
						me._grid.moveTo(-me.h_spacing, i).lineTo(me.graph_width + me.h_spacing, i);

#					me._grid.addEventListener("drag", func (e) { #revise
#							var t = me._chart.getTranslation();
#							t[0] += e.deltaX;
#							t[1] += e.deltaY;
#							if ( t[0] > (var l = me.margins.left + me.h_spacing / 2) )
#								t[0] = l;
#							if ( t[1] < (l = -me.graph_height + me.view_y - me.margins.bottom - me.v_spacing / 2) )
#								t[1] = l;
#							me._chart.setTranslation(t[0], t[1]);
#							me._xAxis.setTranslation(t[0], me._xAxis.getTranslation()[1]);
#							me._yAxis.setTranslation(me._yAxis.getTranslation()[0], t[1]);
#						} );
				},
			};


			var getMode = func {
				if ( getprop("/sim/fgcamera/dialogs/RND/edit-mode") )
					mode = getprop("/sim/fgcamera/dialogs/RND/profile");
				else mode = !getprop("/sim/fgcamera/state/wow");
				#print(mode);
			}
			getMode();

			getCameraIndex = func current_index = getprop("/sim/fgcamera/current-camera/camera-index");
			getCameraIndex();


			#var getData = func (key, i) fgcamera.rnd[ getMode() ].curves[key][i];


			#var setData = func (key, i, d) fgcamera.rnd[ getMode() ].curves[key][i] = d;


		]]></open>

		<close><![CDATA[
			#TestMap.del();
			foreach (var l; listeners)
				removelistener(l);
			setsize(listeners, 0);
		]]></close>
	</nasal>

<!-- Title -->
	<group>
		<layout>hbox</layout>

		<empty><stretch>1</stretch></empty>

		<button>
			<legend> </legend>
			<key>Esc</key>
			<pref-width>16</pref-width>
			<pref-height>16</pref-height>
			<!--binding>
				<command>dialog-show</command>
				<dialog-name>RND-mixer</dialog-name>
			</binding-->
			<binding>
				<command>dialog-show</command>
				<dialog-name>RND-mixer</dialog-name>
			</binding>
			<binding>
				<command>dialog-close</command>
				<dialog-name>RND-curves</dialog-name>
			</binding>
		</button>
	</group>

	<hrule/>


	<group>
		<layout>hbox</layout>

		<group>
			<layout>vbox</layout>
			<canvas>
				<name>level-curve</name>
				<valign>fill</valign>
				<halign>fill</halign>
				<!-- stretch>true</stretch -->
				<pref-width>600</pref-width>
				<pref-height>280</pref-height>
				<nasal>
					<load> <![CDATA[
						var myCanvas1 = canvas.get( cmdarg() );
						myCanvas1.setColorBackground(0,0,0,1); # transparent

						#var v1 = props.getNode("/sim/fgcamera/camera/effects/RND/curves").getChildren("v1");
						#var level = props.getNode("/sim/fgcamera/camera/effects/RND/curves").getChildren("level");
						#var frequency = props.getNode("/sim/fgcamera/effects/power-plant-vibration/" ~ node).getChildren("frequency");
						#var rpm = props.getNode("/sim/fgcamera/effects/power-plant-vibration/" ~ node).getChildren("rpm");
						var myChart1 = Chart.new( "v1", "level", myCanvas1 )
							.chartTitle("Gain curve")
							.xTitle("speed, kt")
							.yTitle("gain")
							.graphLineColor(1, 0, 0)
							.markerLineColor(0, 1, 0)
							.markerFillColor(0, 0, 0)
							.plotAreaColor(0, 0, 0.2)
							.chartAreaColor(0, 0, 0)
							.hLength(200)
							.hSpacing(100)
							.hStep(10)
							.vLength(2)
							.vSpacing(70)
							.vStep(0.5)
						;
						append(listeners, setlistener( "/sim/fgcamera/current-camera/camera-index", func myChart1.update()) );
						append(listeners, setlistener( "/sim/fgcamera/state/wow", func myChart1.update()) );

					]]> </load>
				</nasal>
			</canvas>
		</group>
		<!--input>
			<halign>right</halign>
			<property>/curves/h_spacing</property>
			<live>1</live>
			<pref-width>200</pref-width>
			<height>25</height>
			<binding>
				<command>dialog-apply</command>
			</binding>
			<binding>
				<command>nasal</command>
				<script>myChart1.hSpacing( getprop("/curves/h_spacing") )</script>
			</binding>
		</input-->
	</group>

	<hrule/>

	<group>
		<layout>hbox</layout>
		<group>
			<layout>vbox</layout>
			<canvas>
				<name>filter-curve</name>
				<valign>fill</valign>
				<halign>fill</halign>
				<pref-width>600</pref-width>
				<pref-height>280</pref-height>
				<nasal>
					<load> <![CDATA[
						var myCanvas2 = canvas.get( cmdarg() );
						myCanvas2.setColorBackground(0, 0, 0, 1);

#						var gain = props.getNode("/sim/fgcamera/effects/power-plant-vibration/" ~ node).getChildren("gain");
#						var velocity = props.getNode("/sim/fgcamera/effects/power-plant-vibration/" ~ node).getChildren("rpm1");

#						var v2 = props.getNode("/sim/fgcamera/camera/effects/RND/curves").getChildren("v2");
#						var filter = props.getNode("/sim/fgcamera/camera/effects/RND/curves").getChildren("filter");
						var myChart2 = Chart.new( "v2", "filter", myCanvas2 )
							.chartTitle("Filter curve")
							.chartAreaColor(0, 0, 0)
							.plotAreaColor(0, 0, 0.2)
							.hLength(200)
							.hSpacing(100)
							.hStep(10)
							.vLength(1.5)
							.vSpacing(100)
							.vStep(0.5)
							.xTitle("speed, kt")
							.yTitle("filter")
						;
						append(listeners, setlistener( "/sim/fgcamera/current-camera/camera-index", func myChart2.update()) );
						append(listeners, setlistener( "/sim/fgcamera/state/wow", func myChart2.update()) );
					]]> </load>
				</nasal>
			</canvas>
		</group>
	</group>

</PropertyList>
