var max_velocity = 700;                   # kt
var max_level    = 1.5;
var h_res        = 10 / 100;              # kt/pixel
var v_res        = 1.5 / 250;
var h_grid       = 10;                    # kt
var v_grid       = 0.5;
var h_spacing    = h_grid / h_res;        # pixel
var v_spacing    = v_grid / v_res;        # pixel
var graph_width  = max_velocity / h_res;
var graph_height = max_level / v_res;
var markers      = [];

#==================================================
#
#==================================================
var marker = {
	new: func (x, y, w, i, chart, curve, data_x, data_y) {
		var m = { parents : [ marker ] };

		m._x = x;
		m._y = y;
		m._id = i;
		m.data_x = data_x;
		m.data_y = data_y;
		m._curve = curve;

		m.marker = chart.createChild("group");

		m.marker.createChild("path", "marker" ~ i)
			.moveTo(-w/2, -w/2 * 0)
			.arcSmallCWTo(w/2, w/2, 0, w/2, 0)
			.arcSmallCWTo(w/2, w/2, 0, -w/2, 0)
#						.lineTo(w/2, -w/2)
#						.lineTo(w/2, w/2)
#						.lineTo(-w/2, w/2)
			.close()
			.setColor(0,0.8,0)
			.setColorFill(0.25,0.24,0.22)
			.setStrokeLineWidth(2)
			.addEventListener( "drag", func(e) m._move(e) );

			m.marker.setTranslation(x, y);
			m._update_curve();

		return m;
	},
#--------------------------------------------------
	_move: func (e) {
		var x = me._x + e.deltaX;
		var y = me._y + e.deltaY;

		if ( x < 0 ) x = 0;
		if ( x > graph_width ) x = graph_width;
		if ( me._id == 0) x = 0;

		if ( y > graph_height ) y = graph_height;
		if ( y < 0 ) y = 0;

		me.marker.setTranslation(me._x = x, me._y = y);
		me._update_curve();

		me.data_x[me._id].setValue(x * h_res); #setData(me.data_x, me._id, x * h_res);
		me.data_y[me._id].setValue((graph_height - y) * v_res); #setData(me.data_y, me._id, (graph_height - y) * v_res);
	},
#--------------------------------------------------
	_update_curve: func {
		var x = 2 * me._id;
		var y = x + 1;

		me._curve.setDouble("coord[" ~ x ~ "]", me._x);
		me._curve.setDouble("coord[" ~ y ~ "]", me._y);
	},

	getTranslation: func return me.marker.getTranslation(),

	setTranslation: func (x, y) {
		me.marker.setTranslation(me._x = x, me._y = y);
		me._update_curve();
	},
};

var Chart = {
	new: func (x_vector, y_vector, chart) {
		if ( size(x_vector) != size(y_vector) ) return;
		var m = { parents : [ Chart ] };

		m._x_vector = x_vector;
		m._y_vector = y_vector;
		m._chart   = chart;
		m._markers = [];
		m._curve = m._chart.createChild("path", "curve")
			.moveTo(0,0)
			.setColor(1,0,0)
			.setStrokeLineWidth(3);

		for (var i = 1; i <= 9; i += 1) m._curve.lineTo(0,0);

		m._draw_grid();

		for (var i = 0; i <= 9; i += 1) {
			var x = m._x_vector[i].getValue() / h_res;
			var y = ( max_level - m._y_vector[i].getValue() ) / v_res;

			append( m._markers, marker.new(x, y, 10, i, m._chart, m._curve, x_vector, y_vector) );
		}

		m.reset();

		return m;
	},

	reset: func me._chart.setTranslation(30, -30),

	update: func (h) {
		for (var i = 0; i <= 9; i += 1) {
			var x = getData(h.x, i) / h_res;
			var y = ( max_level - getData(h.y, i) ) / v_res;
			me._markers[i].setTranslation(x, y);
		}
	},

	_draw_grid: func {
		var _text = func (x, y, txt) {
			me._chart.createChild("text")
				.setText(txt)
				.setTranslation(x, y)
				.setAlignment("center-center")
				.setFontSize(15)
				.setFont("LiberationFonts/LiberationSans-Regular.ttf")
				.setColor(1,1,1);
		}

		var grid = me._chart.createChild("path", "grid").setColor(1,1,1).setStrokeDashArray([2,4]);

		for (var i = 0; i <= graph_width; i += h_spacing) {
			grid.moveTo(i, 0).lineTo(i, graph_height);
			_text(i, graph_height + 15, i * h_res);
		}

		for (var i = 0; i <= graph_height; i += v_spacing) {
			grid.moveTo(0, i).lineTo(graph_width, i);
			_text(-15, graph_height - i, i * v_res);
		}

		grid.addEventListener("drag", func (e) {
				var t = me._chart.getTranslation();
				t[0] += e.deltaX;
				t[1] += e.deltaY;
				me._chart.setTranslation(t[0], t[1]);
			} );
	},

};